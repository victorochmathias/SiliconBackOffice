@page "/editsubscriber/{Email}"
@using Microsoft.EntityFrameworkCore.Metadata.Internal



<Header />
<div class="admin-portal">
    <div class="side-bar">
        <NavLink href="/users">Users</NavLink>
        <NavLink href="/courses">Courses</NavLink>
        <NavLink href="/admins">Admins</NavLink>
        <NavLink href="/createcourse">Create Course</NavLink>
        <NavLink href="/subscribers">Subscribers</NavLink>
    </div>
    <div class="content">
        @if (sub == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="my-content">

                <EditForm FormName="updateForm" Model="updateForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
                    <DataAnnotationsValidator />
                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="error-msg">
                            @StatusMessage
                        </div>
                    }
                    <h2>You are now editing: @sub.Email</h2>

                    <div class="contentform">
                        <div id="form-email" class="input-group">
                            <label>Email</label>
                            <InputText @bind-Value="updateForm.Email" type="email" />
                            <ValidationMessage For="() => updateForm.Email" />
                        </div>
                        <button id="form-submit" class="btn-theme-s" type="submit">Update</button>
                    </div>
                </EditForm>
            </div>

        }
    </div>
</div>


@code {
    [Parameter]
    public string Email { get; set; }


    [SupplyParameterFromQuery]
    private string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private UpdateFormModel updateForm { get; set; } = new();

    private Subscriber sub;

    protected override async Task OnInitializedAsync()
    {
        sub = await subscriberService.GetSubscriberByEmailAsync(Email);

    }


    public async Task OnValidSubmit(EditContext editContext)
    {
        var alreadyExists = await subscriberService.GetSubscriberByEmailAsync(updateForm.Email);
        if (alreadyExists != null && alreadyExists.Email != Email)
        {
            StatusMessage = "An account with this email address already exists.";
            return;
        }

        // Get the existing user
        var userEntity = await subscriberService.GetSubscriberByEmailAsync(Email);

        if (userEntity == null)
        {
            StatusMessage = "User not found.";
            return;
        }


        var success = await subscriberService.UpdateSubscriberAsync(userEntity.Email, updateForm);
        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            StatusMessage = "error. please try again.";
        }
    }



    public class UpdateFormModel
    {
        public string? Email { get; set; }
    }
}

@using SiliconBackOffice.Business.Models
@using System.Text.Json
@inject HttpClient Http

<h3>Create Course Section</h3>
<p>HEJHEJHEJ</p>

<EditForm Model="courseForm" OnValidSubmit="CreateCourse" FormName="createCourseForm" asp-route-returnUrl="@ReturnUrl" OnInitialized="InitializeForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Title:</label>
        <InputText @bind-Value="courseForm.Title" />
    </div>
    <div>
        <label>Image URI:</label>
        <InputText @bind-Value="courseForm.ImageUri" />
    </div>
    <div>
        <label>Image Header URI:</label>
        <InputText @bind-Value="courseForm.ImageHeaderUri" />
    </div>
    <div>
        <label>Is Bestseller:</label>
        <InputCheckbox @bind-Value="courseForm.IsBestseller" />
    </div>
    <div>
        <label>Is Digital:</label>
        <InputCheckbox @bind-Value="courseForm.IsDigital" />
    </div>
    <div>
        <label>Categories (comma-separated):</label>
        <InputText @bind-Value="courseForm.Categories" />
    </div>
    <div>
        <label>Ingress:</label>
        <InputText @bind-Value="courseForm.Ingress" />
    </div>
    <div>
        <label>Star Rating:</label>
        <InputNumber @bind-Value="courseForm.StarRating" />
    </div>
    <div>
        <label>Reviews:</label>
        <InputText @bind-Value="courseForm.Reviews" />
    </div>
    <div>
        <label>Likes In Percent:</label>
        <InputText @bind-Value="courseForm.LikesInProcent" />
    </div>
    <div>
        <label>Likes:</label>
        <InputText @bind-Value="courseForm.Likes" />
    </div>
    <div>
        <label>Hours:</label>
        <InputText @bind-Value="courseForm.Hours" />
    </div>
    <div>
        <label>Author Name:</label>
        @if (courseForm.Authors != null && courseForm.Authors.Any())
        {
            <InputText @bind-Value="courseForm.Authors[0].Name" />
        }
        else
        {
            <InputText @bind-Value="authorName" />
        }
    </div>




    <div>
        <label>Price:</label>
        <InputNumber @bind-Value="courseForm.Prices.Price" />
    </div>
    <div>
        <label>Currency:</label>
        <InputText @bind-Value="courseForm.Prices.Currency" />
    </div>
    <div>
        <label>Discount:</label>
        <InputNumber @bind-Value="courseForm.Prices.Discount" />
    </div>
    <div>
        <label>Description:</label>
        <InputText @bind-Value="courseForm.Content.Description" />
    </div>
    <div>
        <label>Includes (comma-separated):</label>
        <InputText @bind-Value="courseForm.Content.Includes" />
    </div>
    <div>
        <h4>Program Details:</h4>
        @* @foreach (var detail in courseForm.Content.ProgramDetails)
        {
            <div>
                <label>Id @detail.Id:</label>
                <br />
                <label>Title:</label>
                <InputText @bind-Value="detail.Title" />
                <br />
                <label>Description:</label>
                <InputText @bind-Value="detail.Description" />
                <br />
            </div>
        } *@
    </div>

    <button type="submit">Create Course</button>
</EditForm>

@if (!string.IsNullOrEmpty(jsonOutput))
{
    <h3>JSON Output:</h3>
    <pre>@jsonOutput</pre>
}

@code {
    [SupplyParameterFromForm]
    private CreateCourseCardModel1 courseForm { get; set; } = new();
    private string authorName = "";

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? jsonOutput;

    private async Task CreateCourse()
    {

        var request = new
        {
            query = "mutation ($input: CourseCreateRequestInput!) { createCourse(input: $input) { id title } }",
            variables = new { input = courseForm }
        };

        jsonOutput = JsonSerializer.Serialize(request, new JsonSerializerOptions { WriteIndented = true });

        Console.WriteLine("JSON request: " + jsonOutput);

        try
        {
            var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-backend.azurewebsites.net/api/graphql", request);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                jsonOutput += "Success: " + responseContent;
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                jsonOutput += "Error: " + responseContent;
            }
        }
        catch (Exception ex)
        {
            jsonOutput += "Exception: " + ex.Message;
        }
    }

    private void InitializeForm()
    {
        // Lägg till ett standardförfattareobjekt om listan är tom
        if (courseForm.Authors == null || courseForm.Authors.Count == 0)
        {
            courseForm.Authors = new List<AuthorModel1> { new AuthorModel1() };
        }
    }

    public string AuthorNames => string.Join(", ", courseForm.Authors.Select(author => author.Name));

    public class CreateCourseCardModel1
    {
        public CreateCourseCardModel1()
        {
            Authors = new List<AuthorModel1>();
            Prices = new PricesModel1();
            Content = new ContentModel1
                {
                    ProgramDetails = new List<ProgramDetailItemModel1>
            {
                new ProgramDetailItemModel1 { Id = 1 },
                new ProgramDetailItemModel1 { Id = 2 },
                new ProgramDetailItemModel1 { Id = 3 },
                new ProgramDetailItemModel1 { Id = 4 },
                new ProgramDetailItemModel1 { Id = 5 },
                new ProgramDetailItemModel1 { Id = 6 }
            }
                };
        }

        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? LikesInProcent { get; set; }
        public string? Likes { get; set; }
        public string? Hours { get; set; }
        public List<AuthorModel1>? Authors { get; set; }
        public PricesModel1 Prices { get; set; }
        public ContentModel1 Content { get; set; }
    }

    public class AuthorModel1
    {
        public string? Name { get; set; }
    }

    public class PricesModel1
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class ContentModel1
    {
        public ContentModel1()
        {
            ProgramDetails = new List<ProgramDetailItemModel1>();
        }

        public string? Description { get; set; }
        public string? Includes { get; set; }
        public List<ProgramDetailItemModel1>? ProgramDetails { get; set; }
    }

    public class ProgramDetailItemModel1
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }
}